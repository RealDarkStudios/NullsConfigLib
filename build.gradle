plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'dev.yumi.gradle.licenser' version '1.2.0'
    id 'signing'
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    apply plugin: 'dev.yumi.gradle.licenser'
    apply plugin: 'signing'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name = 'QuiltMC'
            url = "https://maven.quiltmc.org/repository/release"
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }

        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-$rootProject.parchment_minecraft_version:$rootProject.parchment_mappings_version@zip")
        }

        ["json", "gson"].forEach {
            api "org.quiltmc.parsers:$it:$rootProject.quilt_parsers_version"
            include "org.quiltmc.parsers:$it:$rootProject.quilt_parsers_version"
        }

        api "org.jetbrains:annotations:$rootProject.jetbrains_annotations_version"
        include "org.jetbrains:annotations:$rootProject.jetbrains_annotations_version"
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
        withJavadocJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()

                artifact(jar)
                artifact(sourcesJar)
                artifact(javadocJar)
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            maven {
                def releasesRepoUrl = "${System.getProperty("maven.repo")}/releases"
                def snapshotsRepoUrl = "${System.getProperty("maven.repo")}/snapshots"
                url project.hasProperty("release") ? releasesRepoUrl : snapshotsRepoUrl
                credentials {
                    username = System.getProperty("maven.user")
                    password = System.getProperty("maven.secret")
                }
            }

            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    license {
        rule rootProject.file("LICENSE_HEADER")

        var common = "COMMON_LICENSABLE_FILES"
        var fabric = "FABRIC_LICENSABLE_FILES"
        var neoforge = "NEOFORGE_LICENSABLE_FILES"
        var licensables = project.name == "neoforge" ? neoforge : project.name == "fabric" ? fabric : common

        rootProject.file(licensables).eachLine {
            include "$it"
        }
    }

    signing {
        useGpgCmd()
        sign configurations.runtimeElements
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
        options.memberLevel = JavadocMemberLevel.PRIVATE
    }
}